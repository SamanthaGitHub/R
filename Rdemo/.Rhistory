shiny::runApp()
runApp()
runApp('app2.R')
load("C:/Users/saman/Desktop/demo R tutorial/Rdemo/.RData")
library(shiny); runApp('app3-playGolf.R')
runApp('app3-playGolf.R')
runApp('app3-playGolf.R')
randomForest()
randomForest
randomForest(nrow=5)
randomForest::getTree()
runApp('app3-playGolf.R')
weather
head(weather)
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
weather
runApp('app3-playGolf.R')
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
play <- "play"
df <- rbind(df, play)
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
q
datasetInput <- reactive({
# outlook,temperature,humidity,windy,play
df <- data.frame(
Name = c("outlook",
"temperature",
"humidity",
"windy"),
Value = as.character(c(input$outlook,
input$temperature,
input$humidity,
input$windy)),
stringsAsFactors = FALSE)
play <- "play"
df <- rbind(df, play)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
runApp('irisPredictor/app-numeric.R')
runApp('irisPredictor/app-slider.R')
runApp('irisPredictor/app-numeric.R')
runApp('irisPredictor/app-numeric.R')
runApp('irisPredictor/app-numeric.R')
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
library(shiny); runApp('irisPredictor/app-numeric.R')
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
# Building Random forest model
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
ris
iris
library(shiny); runApp('irisPredictor/app-numeric.R')
runApp('app5-BMICalculator.R')
runApp('app5-BMICalculator.R')
runApp('app5-BMICalculator.R')
`fishData (1)` <- readRDS("C:/Users/saman/Downloads/fishData (1).RDS")
library(shiny); runApp('app2-ozoneHist.R')
library(shiny); runApp('app2-ozoneHist.R')
runApp('app1-nameOutput.R')
